{"ast":null,"code":"import { Type } from \"./contactActions\";\nimport { getFilterValue, addContact, deleteItem } from \"./contactActions\";\nconst initialState = {\n  contacts: [],\n  filter: \"\"\n};\n\nconst contactReducer = (state = { ...initialState\n}, {\n  type,\n  payload\n}) => {\n  switch (type) {\n    case getFilterValue.type:\n      return { ...state,\n        filter: payload\n      };\n\n    case addContact.type:\n      return { ...state,\n        contacts: [...state.contacts, payload]\n      };\n\n    case deleteItem.type:\n      return { ...state,\n        contacts: [...state.contacts.filter(contact => contact.id !== payload)]\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default contactReducer;","map":{"version":3,"sources":["D:/GO/goit-react-hw-06-phonebook/src/components/redux/contactReducer.js"],"names":["Type","getFilterValue","addContact","deleteItem","initialState","contacts","filter","contactReducer","state","type","payload","contact","id"],"mappings":"AAAA,SAASA,IAAT,QAAqB,kBAArB;AACA,SAASC,cAAT,EAAyBC,UAAzB,EAAqCC,UAArC,QAAuD,kBAAvD;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,EADS;AAEnBC,EAAAA,MAAM,EAAE;AAFW,CAArB;;AAKA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAG,EAAE,GAAGJ;AAAL,CAAT,EAA8B;AAAEK,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAA9B,KAAoD;AACzE,UAAQD,IAAR;AACE,SAAKR,cAAc,CAACQ,IAApB;AACE,aAAO,EAAE,GAAGD,KAAL;AAAYF,QAAAA,MAAM,EAAEI;AAApB,OAAP;;AACF,SAAKR,UAAU,CAACO,IAAhB;AACE,aAAO,EAAE,GAAGD,KAAL;AAAYH,QAAAA,QAAQ,EAAE,CAAC,GAAGG,KAAK,CAACH,QAAV,EAAoBK,OAApB;AAAtB,OAAP;;AACF,SAAKP,UAAU,CAACM,IAAhB;AACE,aAAO,EACL,GAAGD,KADE;AAELH,QAAAA,QAAQ,EAAE,CACR,GAAGG,KAAK,CAACH,QAAN,CAAeC,MAAf,CAAuBK,OAAD,IAAaA,OAAO,CAACC,EAAR,KAAeF,OAAlD,CADK;AAFL,OAAP;;AAMF;AACE,aAAOF,KAAP;AAbJ;AAeD,CAhBD;;AAiBA,eAAeD,cAAf","sourcesContent":["import { Type } from \"./contactActions\";\r\nimport { getFilterValue, addContact, deleteItem } from \"./contactActions\";\r\n\r\nconst initialState = {\r\n  contacts: [],\r\n  filter: \"\",\r\n};\r\n\r\nconst contactReducer = (state = { ...initialState }, { type, payload }) => {\r\n  switch (type) {\r\n    case getFilterValue.type:\r\n      return { ...state, filter: payload };\r\n    case addContact.type:\r\n      return { ...state, contacts: [...state.contacts, payload] };\r\n    case deleteItem.type:\r\n      return {\r\n        ...state,\r\n        contacts: [\r\n          ...state.contacts.filter((contact) => contact.id !== payload),\r\n        ],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nexport default contactReducer;\r\n"]},"metadata":{},"sourceType":"module"}